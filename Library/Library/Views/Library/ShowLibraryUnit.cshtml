@model Library.ViewModels.CurrentModelUnitViewModel

<div class="text-center">
    @if (@Model.Book != null)
    {
        <div class="col-md-push-1 col-md-6 image">
            @if (@Model.Book.Covers.Count() == 0)
            {
                <img class="coverView" src="~/Content/images/cover.png" />
            }
            else
            {
                foreach (var book in Model.Book.Covers)
                {
                    @Html.Raw("<img class='coverView' src=\"data:image/jpeg;base64,"
                   + Convert.ToBase64String(book.CoverForModels) + "\" />");
                }
            }
        </div>
        <div class="col-md-5">
            @using (Html.BeginForm("EditBook", "Library", FormMethod.Post,
                                    new { id = "formforbook", enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(b => b.Book.Id)
                <div class="row">
                    <label class="control-label">Title</label>
                </div>
                <div class="row">
                    @Html.EditorFor(b => b.Book.Title, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Autor</label>
                </div>

                <div class="row">
                    @Html.EditorFor(b => b.Book.Autor, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Year</label>
                </div>

                <div class="row">
                    @Html.EditorFor(b => b.Book.Year, "", new { @class = "form-control" })
                </div>
                <label class="control-label">Book cover</label>

                <div class="file_upload">
                    <button type="button" class="buttonforfile">Select new cover</button>

                    <input type="file">
                    <div>No file</div>
                    <input type="file" accept="image/x-png, image/gif, image/jpeg" id="uploadImage" name="uploadImage" />
                </div>  <br />
                <div class="row">
                    <label class="control-label">Publishing Houses</label>
                </div>
                <div class="row">
                    @foreach (var house in Model.Book.PublishingHouses)
                    {
                        <div class="titlew">
                            @house.Name (@house.YearOfEstablishment)
                        </div>
                    }

                    @{
                        var allHouses = Model.ListOfPublishingHouse;
                        var publishingHouseOfBook = Model.Book.PublishingHouses;
                        var result = allHouses.Except(publishingHouseOfBook);
                        MultiSelectList publishingHouses = new MultiSelectList(result, "Id", "Name");
                    }
                    <label class="control-label">Add new publishing houses</label>
                    @Html.ListBox("publishingHouses", publishingHouses as MultiSelectList,
                    new { @class = "dropdownlist", id = "publishingHouses", multiple = "multiple", size = "4" })
                </div>
                <br />
                <button id="signupSubmit" class="btn btn-info btn-block">Save book</button><br />
                <button class="btn btn-danger btn-block link">
                    @Html.ActionLink("Delete", "DeleteEntity", "Library", new { id = Model.Book.Id }, null)
                </button>
                <br />
                        }
        </div>
                        }
    @if (@Model.Magazine != null)
    {
        <div class="col-md-push-1 col-md-6">

            @if (@Model.Magazine.Covers.Count() == 0)
                {
                <img class="coverView" src="~/Content/images/cover.png" />
            }
            else
            {
                foreach (var magazine in Model.Magazine.Covers)
                {
                    @Html.Raw("<img class='coverView' src=\"data:image/jpeg;base64,"
                   + Convert.ToBase64String(magazine.CoverForModels) + "\" />")
                }
            }
        </div>
        <div class="col-md-6">
            @using (Html.BeginForm("EditMagazine", "Library", FormMethod.Post,
                                    new { id = "formforbook", enctype = "multipart/form-data" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(m => m.Magazine.Id)
                <div class="row">
                    <label class="control-label">Title</label>
                </div>
                <div class="row">
                    @Html.EditorFor(m => m.Magazine.Title, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Magazine number</label>
                </div>

                <div class="row">
                    @Html.EditorFor(m => m.Magazine.MagazineNumber, "", new { @class = "form-control" })
                </div>
                <label class="control-label">Magazine cover</label>

                <div class="file_upload">
                    <button type="button" class="buttonforfile">Select new cover</button>

                    <input type="file">
                    <div>No file</div>
                    <input type="file" accept="image/x-png, image/gif, image/jpeg" id="uploadImage" name="uploadImage" />
                </div>  <br />
                <button id="signupSubmit" class="btn btn-info btn-block">Save magazine</button><br />
                <button class="btn btn-danger btn-block link">
                    @Html.ActionLink("Delete", "DeleteEntity", "Library", new { id = Model.Magazine.Id }, null)
                </button>
                <br />
            }
        </div>
    }
    @if (@Model.Brochure != null)
    {
        <center>
            @using (Html.BeginForm("EditBrochure", "Library", FormMethod.Post, new { id = "formforbook" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(b => b.Brochure.Id)
                <div class="row">
                    <label class="control-label">Title</label>
                </div>
                <div class="row">
                    @Html.EditorFor(b => b.Brochure.Title, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Brochure number</label>
                </div>
                <div class="row">
                    @Html.EditorFor(b => b.Brochure.BrochureNumber, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Cover type</label>
                </div>
                <div class="row">
                    @Html.DropDownListFor(b => b.Brochure.CoverType,
                    EnumHelper.GetSelectList(typeof(Library.Entities.enums.CoverType)),
                    new { @class = "dropdownlist" })
                </div>
                <br />
                <button id="signupSubmit" class="btn btn-info btn-block">Save brochure</button><br />
                <button class="btn btn-danger btn-block link">
                    @Html.ActionLink("Delete", "DeleteEntity", "Library", new { id = Model.Brochure.Id }, null)
                </button>
                <br />
            }
        </center>
    }
    @if (@Model.Newspaper != null)
    {
        <center>
            @using (Html.BeginForm("EditNewspaper", "Library", FormMethod.Post, new { id = "formforbook" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(n => n.Newspaper.Id)

                <div class="row">
                    <label class="control-label">Title</label>
                </div>
                <div class="row">
                    @Html.EditorFor(n => n.Newspaper.Title, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Quantity of articles</label>
                </div>
                <div class="row">
                    @Html.EditorFor(n => n.Newspaper.QuantityOfArticles, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Chief editor</label>
                </div>
                <div class="row">
                    @Html.EditorFor(n => n.Newspaper.ChiefEditor, "", new { @class = "form-control" })
                </div>
                <br />
                <button id="signupSubmit" class="btn btn-info btn-block">Save newspaper</button><br />
                <button class="btn btn-danger btn-block link">
                    @Html.ActionLink("Delete", "DeleteEntity", "Library", new { id = Model.Newspaper.Id }, null)
                </button>
                <br />
            }
        </center>
    }
    @if (@Model.PublishingHouse != null)
    {
        <center>
            @using (Html.BeginForm("EditPublishingHouse", "Library", FormMethod.Post, new { id = "formforbook" }))
            {
                @Html.AntiForgeryToken()
                @Html.HiddenFor(n => n.PublishingHouse.Id)

                <div class="row">
                    <label class="control-label">Name of publishing house</label>
                </div>
                <div class="row">
                    @Html.EditorFor(n => n.PublishingHouse.Name, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Year of establishment</label>
                </div>
                <div class="row">
                    @Html.EditorFor(n => n.PublishingHouse.YearOfEstablishment, "", new { @class = "form-control" })
                </div>
                <div class="row">
                    <label class="control-label">Books</label>
                </div>
                <div class="row">
                    @foreach (var book in Model.PublishingHouse.Books)
                    {
                        <div class="titlew">
                            @book.Title (@book.Autor)
                        </div>
                    }
                    @{
                        var allBooks = Model.ListOfBooks;
                        var publishingHouseBooks = Model.PublishingHouse.Books;
                        var result = allBooks.Except(publishingHouseBooks);
                        MultiSelectList books = new MultiSelectList(result, "Id", "Title");
                    }
                    <label class="control-label">Add new books</label>
                    @Html.ListBox("books", books as MultiSelectList,
                    new { @class = "dropdownlist", id = "books", multiple = "multiple", size = "7" })
                </div>
                <br />
                <button id="signupSubmit" class="btn btn-info btn-block">Save publishing house</button><br />
                <button class="btn btn-danger btn-block link">
                    @Html.ActionLink("Delete", "DeleteEntity", "Library", new { id = Model.PublishingHouse.Id }, null)
                </button>
                <br />
                        }
        </center>
                        }
</div>
